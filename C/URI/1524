#include <stdio.h>
#include <stdlib.h>
#include <iostream> 
using namespace std; 
  

void somaImprime(int Vsoma,int *vet,int N,int K){
    int i = K-1;
    while(i<N){
        Vsoma=Vsoma+vet[i];
        i++;
    }
    
    printf("%d\n",Vsoma);
}
void heapify(int arr[], int n, int i) { 
    int smallest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
  
    if (l < n && arr[l] < arr[smallest]) 
        smallest = l; 
  
    if (r < n && arr[r] < arr[smallest]) 
        smallest = r; 
  
    if (smallest != i) { 
        swap(arr[i], arr[smallest]); 
  
        heapify(arr, n, smallest); 
    } 
} 
void heapSort(int arr[], int n){ 
    
    
    
    
    
    for (int i = n / 2 - 1; i >= 0; i--) 
        heapify(arr, n, i); 
  
    for (int i = n - 1; i >= 0; i--) { 
        swap(arr[0], arr[i]); 
  
        heapify(arr, i, 0); 
    } 
}

main(){

int *auxiliar,*vetor, n, k, c, somatorio = 0;
auxiliar=(int*)malloc(1000*sizeof(int)); // <= 1000
vetor=(int*)malloc(1000*sizeof(int)); // <= 1000
while(scanf("%d %d", &n, &k) != EOF){
        vetor[0] = 0; // Primeiro elemento é 0;
        auxiliar[0] = 0; // Primeiro elemento é 0;
        for(c=0;c<n-1;c++){ // Introduz um elemento na fila e compara com antecessor, guardando o resultado em uma variável 'vetor'. Omite o elemento com indíce 0.
            scanf("%d",&auxiliar[c+1]);
            vetor[c+1]= auxiliar[c+1]-auxiliar[c];
    }
    heapSort(vetor,n);
    somaImprime(somatorio,vetor,n,k);
    somatorio = 0;
  }
    return 0;
}

